@import '../_tools/variables';
@import '../_tools/rem-calc';

// color map
@function color($key) {
	@if map-has-key($colors, $key) {
		@return map-get($colors, $key);
	}
	@warn "Unknown `#{$key}` in combinedColor map.";
	@return null;
}

// breakpoints - @include breakpoint( small )
@mixin breakpoint($breakpoint, $which: null) {
	@if map-has-key($breakpoints, $breakpoint) and null == $which {
		@media (min-width: map-get($breakpoints, $breakpoint)) {
			@content;
		}
	} @else {
		@if 'only' == $which {
			@if $breakpoint =='small' {
				@media (min-width: map-get($breakpoints, 'small')) and (max-width: map-get($breakpoints, 'medium')) {
					@content;
				}
			} @else if $breakpoint =='medium' {
				@media (min-width: map-get($breakpoints, 'medium')) and (max-width: map-get($breakpoints, 'large')) {
					@content;
				}
			} @else if $breakpoint =='large' {
				@media (min-width: map-get($breakpoints, 'large')) and (max-width: map-get($breakpoints, 'xlarge')) {
					@content;
				}
			} @else if $breakpoint =='xlarge' {
				@media (min-width: map-get($breakpoints, 'xlarge')) and (max-width: map-get($breakpoints, 'xxlarge')) {
					@content;
				}
			} @else if $breakpoint =='xxlarge' {
				@media (min-width: map-get($breakpoints, 'xxlarge')) {
					@content;
				}
			}
		}
	}
}

// grid - @include grid( 2, 15, $mobile: true )
@mixin grid($columns, $padding:15, $mobile: false) {

	@if $mobile {
		flex-wrap: wrap;
		$padding: rem-calc(10);
	} @else {
		$padding: calc($padding / 2);
		flex-direction: row;
		flex-wrap: wrap;
	}

	display: flex;
	margin-right: rem-calc(-$padding);
	margin-left: rem-calc(-$padding);

	> div {
		position: relative;
		width: calc(100% / $columns);
		padding-right: rem-calc($padding);
		padding-left: rem-calc($padding);
		margin-bottom: calc(rem-calc($padding) * 2);
	}
}

// split - @include split( 30%, 70%, 15, $mobile: true )
@mixin split($first, $second, $padding: 15, $mobile: false) {

	@if $mobile {
		flex-wrap: wrap;
	} @else {
		flex-direction: row;
		$padding: $padding / 2;
	}

	display: flex;
	margin-right: rem-calc(-$padding);
	margin-left: rem-calc(-$padding);

	> :first-child {
		width: $first;
	}

	> div {
		width: $second;
		padding-right: rem-calc($padding);
		padding-left: rem-calc($padding);

		&:not(.site-header__nav-left):not(.site-header__nav-right)  {
			@include breakpoint( small, only ) {
				margin-bottom: calc(rem-calc($padding) * 2);
			}
		}
	}
}

// set headline sizes and line-height - @include headline( 24, 30, 50 - optional, 50 - optional )
@mixin headline( $font_size, $line_height, $margin-top: null, $margin-bottom: null ){
  display: block;
  font-size: rem-calc( $font_size );
  line-height: $line_height/$font_size;

	@if $margin-top {
		margin-top: rem-calc($margin-top);
	} @else {
		margin-top: rem-calc( $font_size/2);
	}

	@if $margin-bottom {
		margin-bottom: rem-calc($margin-bottom);
	} @else {
		margin-bottom: rem-calc( $font_size/2);
	}
}

// set paragraph sizes and line-height - @include paragraph( 16, 18, 20 - optional, 20 - optional )
@mixin paragraph( $font_size, $line_height, $margin-top: null, $margin-bottom: null ){
  display: block;
  font-size: rem-calc( $font_size );
  line-height: $line_height/$font_size;

	@if $margin-top {
		margin-top: rem-calc($margin-top);
	}

	@if $margin-bottom {
		margin-bottom: rem-calc($margin-bottom);
	} @else {
		margin-bottom: rem-calc( 20);
	}
}

@mixin abs-pos ($top:null, $right:null, $bottom:null, $left:null) {
	position: absolute;
 top: $top;
 right: $right;
 bottom: $bottom;
 left: $left;
}
